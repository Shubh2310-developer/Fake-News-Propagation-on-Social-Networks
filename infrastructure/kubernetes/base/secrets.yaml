# IMPORTANT: This file contains template secrets for development.
# For production, use proper secret management (e.g., HashiCorp Vault, AWS Secrets Manager)
# and never commit actual secrets to version control.

---
# Backend Secrets Template
# Generate actual secrets using: kubectl create secret generic backend-secrets --from-literal=...
apiVersion: v1
kind: Secret
metadata:
  name: backend-secrets
  labels:
    app: fake-news-backend
    component: backend
type: Opaque
data:
  # Base64 encoded values - REPLACE WITH ACTUAL SECRETS
  # echo -n "your-secret-value" | base64

  # Database connection string
  # postgresql://username:password@postgres-service:5432/fake_news_db
  database-url: cG9zdGdyZXNxbDovL2FwcF91c2VyOnNlY3VyZV9wYXNzd29yZEBwb3N0Z3Jlcy1zZXJ2aWNlOjU0MzIvZmFrZV9uZXdzX2Ri

  # Redis connection string
  # redis://username:password@redis-service:6379
  redis-url: cmVkaXM6Ly86c2VjdXJlX3Bhc3N3b3JkQHJlZGlzLXNlcnZpY2U6NjM3OQ==

  # Application secret key for JWT tokens
  secret-key: c3VwZXItc2VjdXJlLXNlY3JldC1rZXktZm9yLWp3dC10b2tlbnM=

  # API keys for external services
  openai-api-key: eW91ci1vcGVuYWktYXBpLWtleS1oZXJl
  huggingface-api-key: eW91ci1odWdnaW5nZmFjZS1hcGkta2V5LWhlcmU=

---
# PostgreSQL Secrets
apiVersion: v1
kind: Secret
metadata:
  name: postgres-secrets
  labels:
    app: postgres
    component: database
type: Opaque
data:
  # Database credentials
  username: YXBwX3VzZXI=  # app_user
  password: c2VjdXJlX3Bhc3N3b3Jk  # secure_password
  postgres-password: cG9zdGdyZXNfc3VwZXJfdXNlcl9wYXNzd29yZA==  # postgres_super_user_password

---
# Redis Secrets
apiVersion: v1
kind: Secret
metadata:
  name: redis-secrets
  labels:
    app: redis
    component: cache
type: Opaque
data:
  # Redis password
  password: c2VjdXJlX3Bhc3N3b3Jk  # secure_password

---
# TLS Certificates (managed by cert-manager)
apiVersion: v1
kind: Secret
metadata:
  name: fake-news-tls
  labels:
    app: fake-news-platform
    component: ingress
type: kubernetes.io/tls
data:
  # These will be automatically populated by cert-manager
  tls.crt: ""
  tls.key: ""

---
# Basic Auth for Admin Access
apiVersion: v1
kind: Secret
metadata:
  name: admin-basic-auth
  labels:
    app: fake-news-platform
    component: admin
type: Opaque
data:
  # Generated with: htpasswd -c auth admin
  # Username: admin, Password: admin123
  auth: YWRtaW46JGFwcjEkR0Q3cFNNRzckOUNCRWJwcU8xNUkuOEhGcTh2dVNLMA==

---
# Docker Registry Secrets (if using private registry)
apiVersion: v1
kind: Secret
metadata:
  name: docker-registry-secret
  labels:
    app: fake-news-platform
type: kubernetes.io/dockerconfigjson
data:
  # Docker registry credentials
  # Generate with: kubectl create secret docker-registry docker-registry-secret \
  #   --docker-server=your-registry.com \
  #   --docker-username=your-username \
  #   --docker-password=your-password \
  #   --docker-email=your-email@example.com
  .dockerconfigjson: eyJhdXRocyI6eyJ5b3VyLXJlZ2lzdHJ5LmNvbSI6eyJ1c2VybmFtZSI6InlvdXItdXNlcm5hbWUiLCJwYXNzd29yZCI6InlvdXItcGFzc3dvcmQiLCJlbWFpbCI6InlvdXItZW1haWxAZXhhbXBsZS5jb20iLCJhdXRoIjoiZVc5MWNpMTFjMlZ5Ym1GdFpUcDViM1Z5TFhCaGMzTjNiM0prIn19fQ==

---
# OAuth/OIDC Secrets (for authentication)
apiVersion: v1
kind: Secret
metadata:
  name: oauth-secrets
  labels:
    app: fake-news-platform
    component: auth
type: Opaque
data:
  # OAuth provider credentials
  google-client-id: eW91ci1nb29nbGUtY2xpZW50LWlk
  google-client-secret: eW91ci1nb29nbGUtY2xpZW50LXNlY3JldA==
  github-client-id: eW91ci1naXRodWItY2xpZW50LWlk
  github-client-secret: eW91ci1naXRodWItY2xpZW50LXNlY3JldA==

---
# Monitoring Secrets
apiVersion: v1
kind: Secret
metadata:
  name: monitoring-secrets
  labels:
    app: fake-news-platform
    component: monitoring
type: Opaque
data:
  # Grafana admin credentials
  grafana-admin-password: Z3JhZmFuYS1hZG1pbi1wYXNzd29yZA==

  # Prometheus basic auth
  prometheus-username: cHJvbWV0aGV1cw==
  prometheus-password: cHJvbWV0aGV1cy1wYXNzd29yZA==

  # Slack webhook for alerts
  slack-webhook-url: aHR0cHM6Ly9ob29rcy5zbGFjay5jb20vc2VydmljZXMvVDAwMDAwMDAwL0IwMDAwMDAwMC9YWFhYWFhYWFhYWFhYWFhYWFhYWFg=