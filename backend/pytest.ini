[tool:pytest]
# ===========================================
# GTDS Backend Pytest Configuration
# ===========================================

# Test discovery
testpaths = tests
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# Minimum version requirement
minversion = 7.0

# Add current directory to Python path
addopts =
    --strict-markers
    --strict-config
    --verbose
    -ra
    --cov=app
    --cov-report=term-missing
    --cov-report=html:htmlcov
    --cov-report=xml
    --cov-fail-under=80
    --tb=short
    --durations=10

# Async support
asyncio_mode = auto

# Test markers
markers =
    unit: Unit tests (fast, isolated)
    integration: Integration tests (database, external services)
    e2e: End-to-end tests (full application flow)
    slow: Slow running tests
    ml: Machine learning model tests
    game_theory: Game theory simulation tests
    network: Network analysis tests
    api: API endpoint tests
    database: Database-related tests
    redis: Redis cache tests
    auth: Authentication and authorization tests
    performance: Performance and load tests
    security: Security-related tests

# Warning filters
filterwarnings =
    error
    ignore::UserWarning
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::ImportWarning
    ignore:.*unclosed.*:ResourceWarning

# Environment variables for testing
env =
    TESTING = true
    DATABASE_URL = postgresql://postgres:password@localhost:5432/gtds_test_db
    REDIS_URL = redis://localhost:6379/1
    SECRET_KEY = test-secret-key-for-testing-only
    DEBUG = false
    LOG_LEVEL = WARNING

# Test collection
collect_ignore = setup.py migrations/ scripts/ .env Dockerfile docker-compose.yml

# Parallel execution settings
# Uncomment to enable parallel test execution
# addopts = -n auto

# Timeout for hanging tests (in seconds)
timeout = 300

# Output format
console_output_style = progress

# Live logging
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# File logging during tests
log_file = tests/pytest.log
log_file_level = DEBUG
log_file_format = %(asctime)s [%(levelname)8s] %(filename)s:%(lineno)d %(funcName)s(): %(message)s
log_file_date_format = %Y-%m-%d %H:%M:%S

# Disable cacheprov warnings
cache_dir = .pytest_cache